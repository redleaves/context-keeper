---
description: 
globs: 
alwaysApply: true
---
# 🔄 Context-Keeper 自动验证流程规则

## 🌟 核心原则

> **服务端代码修改后，AI Agent 必须自动完成完整的验证流程**

任何涉及服务端代码修改的操作，都必须自动执行编译→启动→验证的完整流程，确保代码变更的正确性和系统稳定性。

## 🎯 智能触发机制

### 自动触发条件（MUST TRIGGER）
当满足以下任一条件时，**必须**自动执行完整验证流程：

**代码文件修改类**：
```
✅ 服务端Go代码修改: internal/, cmd/, pkg/ 目录下的 .go 文件
✅ API接口变更: handlers.go, websocket_handler.go 等
✅ 服务配置修改: main_*.go, config相关文件
✅ 路由注册变更: RegisterRoutes, RegisterWebSocketRoutes 等
✅ MCP工具实现: 任何MCP tool相关的处理函数
```

**功能实现类**：
```
✅ 新增MCP工具
✅ WebSocket连接逻辑修改
✅ Session管理功能变更
✅ 数据库/存储相关修改
✅ 错误处理逻辑调整
```

**架构变更类**：
```
✅ 服务启动流程修改
✅ 中间件变更
✅ 服务间通信调整
✅ 协议实现变更
```

## 🚀 完整验证流程（MANDATORY EXECUTION）

### 第一阶段：预检查 (Pre-Check)
```bash
# 1. 检查代码编译状态
if (代码修改完成 && 无语法错误) {
  进入编译阶段
} else {
  停止流程，报告编译错误
}
```

### 第二阶段：服务重启 (Service Restart)
**执行顺序（严格按序）**：

1. **停止现有服务**
```bash
./scripts/manage.sh stop
# 或者 pkill -f context-keeper (兜底方案)
```

2. **编译新版本**
```bash
# HTTP服务编译
go build -o bin/context-keeper-http cmd/server/main.go cmd/server/main_http.go

3. **启动服务**
```bash
# 使用脚本启动HTTP服务
./scripts/manage.sh deploy http --port 8088

4. **等待服务就绪**
```bash
sleep 3
# 检查进程状态
ps aux | grep context-keeper | grep -v grep
```

### 第三阶段：基础验证 (Basic Verification)
**必须全部通过，任一失败则报告问题**：

1. **服务可用性检查**
```bash
# HTTP服务健康检查
curl http://localhost:8088/health
# 期望: {"mode":"streamable-http","status":"healthy",...}

2. **端口监听验证**
```bash
netstat -an | grep LISTEN | grep -E '8088'
```


### 第四阶段：功能回归验证 (Regression Testing)
**核心功能验证（必须全部通过）**：

1. **MCP协议基础功能**
```bash
# Session管理验证
curl -X POST http://localhost:8088/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","id":1,"method":"tools/call","params":{"name":"session_management","arguments":{"action":"get_or_create"}}}'
# 期望: 返回成功的session创建响应
```

2. **WebSocket连接功能**
```bash
# WebSocket状态检查
curl http://localhost:8088/ws/status
# 期望: {"status":"success",...}

# Session注册端点验证
curl -X POST "http://localhost:8088/api/ws/register-session" \
  -H "Content-Type: application/json" \
  -d '{"sessionId":"test-session-123","connectionId":"test-connection-456"}'
# 期望: {"status":"success","message":"会话注册成功",...}
```

3. **关键MCP工具验证**
```bash
# associate_file工具测试
curl -X POST http://localhost:8088/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","id":2,"method":"tools/call","params":{"name":"associate_file","arguments":{"sessionId":"test-session","filePath":"test.go"}}}'

# retrieve_context工具测试
curl -X POST http://localhost:8088/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","id":3,"method":"tools/call","params":{"name":"retrieve_context","arguments":{"sessionId":"test-session","query":"test"}}}'
```

### 第五阶段：新功能验证 (New Feature Testing)
**根据修改内容进行针对性验证**：

**如果修改了WebSocket相关代码**：
```javascript
// 运行WebSocket测试客户端
node websocket_test_client.js
// 期望: WebSocket连接建立成功，Session映射正常
```

**如果修改了Session管理**：
```javascript  
// 运行Session状态检查
node session_status_check.js
// 期望: 所有Session状态检查通过
```

**如果新增了MCP工具**：
```bash
# 测试新工具的基础调用
curl -X POST http://localhost:8088/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","id":4,"method":"tools/call","params":{"name":"新工具名称","arguments":{...}}}'
```

**如果修改了路由**：
```bash
# 验证新路由可访问
curl http://localhost:8088/新路由路径
# 验证原有路由仍然工作
curl http://localhost:8088/health
```

## 🤖 智能执行策略

### 执行时机判断
```
📝 代码编辑完成后 → 立即检查是否需要验证
⚡ 检测到服务端文件修改 → 自动标记需要验证  
🔍 用户请求验证时 → 立即执行完整流程
🚨 测试失败时 → 报告问题并建议修复
```

### 并行vs串行执行
```
🔄 串行执行: 停止→编译→启动→验证 (必须按序)
⚡ 并行验证: 基础验证和功能验证可以并行进行
🎯 智能跳过: 如果只修改了文档或配置，跳过某些验证步骤
```

### 错误处理策略
```
🛡️ 编译失败 → 停止流程，报告编译错误，不启动服务
🛡️ 启动失败 → 检查端口占用，尝试重新启动，查看日志
🛡️ 验证失败 → 详细报告失败的验证点，提供修复建议
🛡️ 部分失败 → 标记问题区域，允许继续其他验证
```

## 📊 验证报告格式

### 成功报告模板
```
🎉 **验证完成！所有检查通过**

## 📋 执行摘要
- ✅ 服务重启: 成功
- ✅ 基础验证: 通过 (3/3)
- ✅ 回归验证: 通过 (5/5) 
- ✅ 新功能验证: 通过 (2/2)

## 🔧 服务状态
- HTTP服务: 运行正常 (PID: 12345, 端口: 8088)
- WebSocket服务: 运行正常 (PID: 12346, 端口: 7890)

## 🚀 可以继续开发新功能！
```

### 失败报告模板
```
⚠️ **验证发现问题**

## 🚨 失败项目
- ❌ WebSocket连接测试: 连接超时
  - 问题: WebSocket服务未能在7890端口启动
  - 建议: 检查端口占用，查看日志文件

## ✅ 通过项目  
- ✅ HTTP服务启动: 正常
- ✅ 基础API测试: 通过

## 🔧 修复建议
1. 检查WebSocket服务配置
2. 查看 logs/context-keeper-websocket.log
3. 修复后重新运行验证
```

## 🎯 具体执行命令模板

### 完整验证脚本（推荐使用）
```bash
# 一键验证脚本
echo "🔄 开始自动验证流程..."

# 1. 停止服务
echo "⏹️ 停止现有服务..."
./scripts/manage.sh stop

# 2. 编译服务
echo "🔨 编译服务..."
go build -o bin/context-keeper-http cmd/server/main.go cmd/server/main_http.go
# 3. 启动服务
echo "🚀 启动服务..."
./scripts/manage.sh deploy http --port 8088

# 4. 等待服务就绪
echo "⏱️ 等待服务就绪..."
sleep 3

# 5. 基础验证
echo "🔍 基础验证..."
curl -s http://localhost:8088/health | grep "healthy" || echo "❌ HTTP服务验证失败"
# 6. 功能验证
echo "🧪 功能验证..."
node session_status_check.js
node websocket_test_client.js

echo "✅ 验证流程完成！"
```

## 🎪 特殊场景处理

### 仅修改配置文件
```
修改内容: 配置参数调整
验证范围: 基础验证 + 配置相关功能测试
跳过内容: 复杂的功能回归测试
```

### 紧急修复
```
修改内容: 关键Bug修复
验证范围: 完整验证 + 额外的稳定性测试  
优先级: 最高，必须100%通过
```

### 实验性功能
```
修改内容: 新功能开发
验证范围: 完整验证 + 新功能专项测试
容错策略: 新功能可以部分失败，但不能影响原有功能
```

---

## 🔥 执行强制规则

### MUST DO (必须执行)
1. **任何服务端Go代码修改后，必须执行完整验证流程**
2. **验证失败时，必须报告具体问题和修复建议**  
3. **验证通过后，必须提供清晰的状态报告**

### SHOULD DO (应该执行)
1. **优先使用脚本管理服务生命周期**
2. **验证过程中提供详细的进度反馈**
3. **保存验证日志供后续分析**

### MUST NOT DO (禁止操作)
1. **禁止跳过基础验证步骤**
2. **禁止在验证失败时继续开发新功能**  
3. **禁止忽略服务启动失败**

---

> **记住**: 完善的验证流程是代码质量的保障，每次修改后的自动验证不是负担，而是让开发更加自信和高效的利器！
